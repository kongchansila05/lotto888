if (typeof(btoa) == "undefined") {
    btoa = function() {
        var base64EncodeChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
        return function(str) {
            var out, i, j, len, r, l, c;
            i = j = 0;
            len = str.length;
            r = len % 3;
            len = len - r;
            l = (len / 3) << 2;
            if (r > 0) {
                l += 4;
            }
            out = new Array(l);
            while (i < len) {
                c = str.charCodeAt(i++) << 16 | str.charCodeAt(i++) << 8 | str.charCodeAt(i++);
                out[j++] = base64EncodeChars[c >> 18] +
                    base64EncodeChars[c >> 12 & 0x3f] +
                    base64EncodeChars[c >> 6 & 0x3f] +
                    base64EncodeChars[c & 0x3f];
            }
            if (r == 1) {
                c = str.charCodeAt(i++);
                out[j++] = base64EncodeChars[c >> 2] +
                    base64EncodeChars[(c & 0x03) << 4] +
                    "==";
            } else if (r == 2) {
                c = str.charCodeAt(i++) << 8 | str.charCodeAt(i++);
                out[j++] = base64EncodeChars[c >> 10] +
                    base64EncodeChars[c >> 4 & 0x3f] +
                    base64EncodeChars[(c & 0x0f) << 2] +
                    "=";
            }
            return out.join('');
        }
    }();
}
if (typeof(atob) == "undefined") {
    atob = function() {
        var base64DecodeChars = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1];
        return function(str) {
            var c1, c2, c3, c4;
            var i, j, len, r, l, out;
            len = str.length;
            if (len % 4 != 0) {
                return '';
            }
            if (/[^ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\+\/\=]/.test(str)) {
                return '';
            }
            if (str.charAt(len - 2) == '=') {
                r = 1;
            } else if (str.charAt(len - 1) == '=') {
                r = 2;
            } else {
                r = 0;
            }
            l = len;
            if (r > 0) {
                l -= 4;
            }
            l = (l >> 2) * 3 + r;
            out = new Array(l);
            i = j = 0;
            while (i < len) {
                c1 = base64DecodeChars[str.charCodeAt(i++)];
                if (c1 == -1) break;
                c2 = base64DecodeChars[str.charCodeAt(i++)];
                if (c2 == -1) break;
                out[j++] = String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));
                c3 = base64DecodeChars[str.charCodeAt(i++)];
                if (c3 == -1) break;
                out[j++] = String.fromCharCode(((c2 & 0x0f) << 4) | ((c3 & 0x3c) >> 2));
                c4 = base64DecodeChars[str.charCodeAt(i++)];
                if (c4 == -1) break;
                out[j++] = String.fromCharCode(((c3 & 0x03) << 6) | c4);
            }
            return out.join('');
        }
    }();
}
String.prototype.toUTF8 = function() {
    var str = this;
    if (str.match(/^[\x00-\x7f]*$/) != null) {
        return str.toString();
    }
    var out, i, j, len, c, c2;
    out = [];
    len = str.length;
    for (i = 0, j = 0; i < len; i++, j++) {
        c = str.charCodeAt(i);
        if (c <= 0x7f) {
            out[j] = str.charAt(i);
        } else if (c <= 0x7ff) {
            out[j] = String.fromCharCode(0xc0 | (c >>> 6), 0x80 | (c & 0x3f));
        } else if (c < 0xd800 || c > 0xdfff) {
            out[j] = String.fromCharCode(0xe0 | (c >>> 12), 0x80 | ((c >>> 6) & 0x3f), 0x80 | (c & 0x3f));
        } else {
            if (++i < len) {
                c2 = str.charCodeAt(i);
                if (c <= 0xdbff && 0xdc00 <= c2 && c2 <= 0xdfff) {
                    c = ((c & 0x03ff) << 10 | (c2 & 0x03ff)) + 0x010000;
                    if (0x010000 <= c && c <= 0x10ffff) {
                        out[j] = String.fromCharCode(0xf0 | ((c >>> 18) & 0x3f), 0x80 | ((c >>> 12) & 0x3f), 0x80 | ((c >>> 6) & 0x3f), 0x80 | (c & 0x3f));
                    } else {
                        out[j] = '?';
                    }
                } else {
                    i--;
                    out[j] = '?';
                }
            } else {
                i--;
                out[j] = '?';
            }
        }
    }
    return out.join('');
}
String.prototype.toUTF16 = function() {
    var str = this;
    if ((str.match(/^[\x00-\x7f]*$/) != null) || (str.match(/^[\x00-\xff]*$/) == null)) {
        return str.toString();
    }
    var out, i, j, len, c, c2, c3, c4, s;
    out = [];
    len = str.length;
    i = j = 0;
    while (i < len) {
        c = str.charCodeAt(i++);
        switch (c >> 4) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                out[j++] = str.charAt(i - 1);
                break;
            case 12:
            case 13:
                c2 = str.charCodeAt(i++);
                out[j++] = String.fromCharCode(((c & 0x1f) << 6) | (c2 & 0x3f));
                break;
            case 14:
                c2 = str.charCodeAt(i++);
                c3 = str.charCodeAt(i++);
                out[j++] = String.fromCharCode(((c & 0x0f) << 12) | ((c2 & 0x3f) << 6) | (c3 & 0x3f));
                break;
            case 15:
                switch (c & 0xf) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        c2 = str.charCodeAt(i++);
                        c3 = str.charCodeAt(i++);
                        c4 = str.charCodeAt(i++);
                        s = ((c & 0x07) << 18) | ((c2 & 0x3f) << 12) | ((c3 & 0x3f) << 6) | (c4 & 0x3f) - 0x10000;
                        if (0 <= s && s <= 0xfffff) {
                            out[j++] = String.fromCharCode(((s >>> 10) & 0x03ff) | 0xd800, (s & 0x03ff) | 0xdc00);
                        } else {
                            out[j++] = '?';
                        }
                        break;
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                        i += 4;
                        out[j++] = '?';
                        break;
                    case 12:
                    case 13:
                        i += 5;
                        out[j++] = '?';
                        break;
                }
        }
    }
    return out.join('');
}
jQuery.extend({
    evalJSON: function(strJson) {
        return eval("(" + strJson + ")");
    }
});
jQuery.extend({
    toJSON: function(object) {
        if (null == object) return "null";
        var type = typeof object;
        if ('object' == type) {
            if (Array == object.constructor) type = 'array';
            else if (RegExp == object.constructor) type = 'regexp';
            else type = 'object';
        }
        switch (type) {
            case 'undefined':
            case 'unknown':
                return;
                break;
            case 'function':
            case 'boolean':
            case 'regexp':
                return object.toString();
                break;
            case 'number':
                return isFinite(object) ? object.toString() : 'null';
                break;
            case 'string':
                return '"' + object.replace(/(\\|\")/g, "\\$1").replace(/\n|\r|\t/g, function() {
                    var a = arguments[0];
                    return (a == '\n') ? '\\n' : (a == '\r') ? '\\r' : (a == '\t') ? '\\t' : ""
                }) + '"';
                break;
            case 'object':
                if (object === null) return 'null';
                var pp = "";
                var value = "";
                try {
                    var results = [];
                    for (var property in object) {
                        pp = object[property];
                        value = jQuery.toJSON(pp);
                        if (value !== undefined) results.push('"' + property + '":' + value);
                    }
                    return '{' + results.join(', ') + '}';
                } catch (e) {
                    alert(property + ":" + value + "\n" + results.join(','));
                }
                break;
            case 'array':
                var results = [];
                if (object.length > 0) {
                    for (var i = 0; i < object.length; i++) {
                        var value = jQuery.toJSON(object[i]);
                        if (value !== undefined) results.push(value);
                    };
                    return '[' + results.join(',') + ']';
                } else {
                    for (var k in object) {
                        var value = jQuery.toJSON(object[k]);
                        if (value !== undefined) results.push('"' + k + "\":" + value);
                    }
                    return '{' + results.join(',') + '}';
                }
                break;
        }
    }
});
(function($) {
    $.ajmega = function(o) {
        var SID = window['SID'];
        if (SID) {} else {
            var SID = "DEBUGSID";
        }
        var _key = "TODOTODOkey";
        var _o = $.evalJSON($.toJSON(o));
        var _data = {};
        if (o['enc'] == true) {
            _data = {};
            _data['_a'] = o.data['_a'];
            if (!o.data['_s']) _data['_s'] = SID;
            else _data['_s'] = o.data['_s'];
            if (!o.data['_b']) _data['_b'] = "action";
            else _data['_b'] = o.data['_b'];
            _data['_e'] = _key;
            var _g = o.data['_g'];
            if (_g == undefined || _g == "") _data['_g'] = 1;
            else _data['_g'] = _g;
            if (btoa) {
                var _data_s = $.toJSON(o.data);
                _data['_d'] = btoa(_data_s.toUTF8());
            } else {
                alert("btoa null");
            }
        } else {
            _data = _o.data;
            if (!o.data['_s']) _data['_s'] = SID;
            if (!o.data['_b']) _data['_b'] = "action";
        }
        _o['data'] = _data;
        var _type = o['type'];
        if (_type == undefined || _type == "") {
            _o['type'] = "POST";
        }
        _o.success = function(data, textStatus) {
            this['return'] = 1;
            this['status'] = textStatus;
            if (data == "") this['status'] = "warning";
        };
        _o.error = function(_XMLHttpRequest, textStatus, errorThrown) {
            this['return'] = -2;
            this['status'] = textStatus;
            this['errorThrown'] = errorThrown;
        };
        _o.complete = function(_XMLHttpRequest) {
            var data = _XMLHttpRequest.responseText;
            if (this.enc) {
                if (data == "") {
                    if (o['error']) {
                        o.error(_XMLHttpRequest, this['status'], this['errorThrown']);
                    }
                    return;
                }
                var dec = "";
                try {
                    dec = atob(data);
                } catch (e) {}
                if (dec != "") data = dec;
            }
            var obj = data;
            try {
                obj = $.evalJSON(data);
                if (obj == null) obj = data;
            } catch (e) {
                this['status'] = "warning";
                this['errorThrown'] = e;
                obj = data;
                return;
            }
            if (data && obj['errno'] && obj['errmsg']) {
                this['status'] = "error";
                var _e = new Error;
                _e.number = obj['errno'];
                _e.message = obj['errmsg'];
                this['errorThrown'] = _e;
                this['return'] = -1;
            }
            try {
                if (o['error'] && this['return'] < 0) {
                    o.error(_XMLHttpRequest, this['status'], this['errorThrown']);
                }
            } catch (e) {}
            try {
                if (o['success'] && this['return'] > 0) o.success(_XMLHttpRequest, obj, this['status']);
            } catch (e) {}
            try {
                if (o['complete']) o.complete(_XMLHttpRequest, this['return']);
            } catch (e) {}
        };
        var rt = $.ajax(_o);
        return rt;
    }
})(jQuery);